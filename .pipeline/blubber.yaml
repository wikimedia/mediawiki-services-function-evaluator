version: v4
base: docker-registry.wikimedia.org/nodejs16-slim
lives:
  in: /srv/service
runs:
  environment: { APP_BASE_PATH: /srv/service }

variants:
  # These variants concern the soon-to-be-deprecated mono-evaluator that includes
  # all programming languages.
  build:
    copies:
    - from: local
    - from: local
      source: src/monolithicSoftwareLanguages.js
      destination: ./executorConfigurations.js
    apt: { packages: [git, build-essential, python3-dev] }
    # TODO (T318728): When/if we split the services, the evaluator will need
    # its own checkout of function-schemata.
    node: { requirements: [package.json, package-lock.json, executors/javascript/function-schemata/package.json, executors/javascript/function-schemata/package-lock.json] }
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      environment: { LINK: g++ }
  development:
    includes: [build]
    apt: { packages: [ca-certificates] }
    entrypoint: [node, server.js]
  test:
    includes: [build]
    apt: { packages: [ca-certificates] }
    entrypoint: [npm, test]
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      insecurely: true
  prep:
    includes: [build]
    node: { env: production }

  # This is the "omnibus" variant with all languages supported in one place
  production:
    copies: [prep]
    node: { env: production }
    apt: { packages: [python3] }
    entrypoint: [node, server.js]

  # These variants are for building, testing, and deploying an evaluator for
  # Python3 programming language varieties only.
  build-python3-all-evaluator:
    copies:
    - from: local
      source: app.js
      destination: .
    - from: local
      source: server.js
      destination: .
    - from: local
      source: package.json
      destination: .
    - from: local
      source: config*.yaml
      destination: .
    - from: local
      source: spec*.yaml
      destination: .
    - from: local
      source: targets.yaml
      destination: .
    - from: local
      source: src/
      destination: ./src
    - from: local
      source: lib/
      destination: ./lib
    - from: local
      source: routes/
      destination: ./routes
    - from: local
      source: static/
      destination: ./static
    - from: local
      source: executors/python3/
      destination: ./executors/python3
    - from: local
      source: executors/javascript/function-schemata
      destination: ./executors/javascript/function-schemata
    - from: local
      source: executors/python3/pythonSoftwareLanguages.js
      destination: ./executorConfigurations.js
    - from: local
      source: test/
      destination: ./test
    - from: local
      source: test_data/
      destination: ./test_data
    - from: local
      source: .eslintrc.json
      destination: ./.eslintrc.json
    apt: { packages: [git, build-essential, python3-dev] }
    node: { requirements: [package.json, package-lock.json, executors/javascript/function-schemata/package.json, executors/javascript/function-schemata/package-lock.json] }
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      environment: { LINK: g++ }
  development-python3-all:
    includes: [build-python3-all-evaluator]
    apt: { packages: [ca-certificates] }
    entrypoint: [node, server.js]
  prep-python3-all:
    includes: [build-python3-all-evaluator]
    node: { env: production }
  production-python3-all:
    copies: [prep-python3-all]
    node: { env: production }
    apt: { packages: [python3] }
    entrypoint: [node, server.js]
  test-python3-all-evaluator:
    includes: [build-python3-all-evaluator]
    apt: { packages: [ca-certificates] }
    entrypoint: [npm, run, test:python3-all]
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      insecurely: true

  # These variants are for building, testing, and deploying an evaluator for
  # JavaScript programming language varieties only.
  build-javascript-all-evaluator:
    copies:
    - from: local
      source: app.js
      destination: .
    - from: local
      source: server.js
      destination: .
    - from: local
      source: package.json
      destination: .
    - from: local
      source: config*.yaml
      destination: .
    - from: local
      source: spec*.yaml
      destination: .
    - from: local
      source: targets.yaml
      destination: .
    - from: local
      source: src/
      destination: ./src
    - from: local
      source: lib/
      destination: ./lib
    - from: local
      source: routes/
      destination: ./routes
    - from: local
      source: static/
      destination: ./static
    - from: local
      source: executors/javascript/
      destination: ./executors/javascript
    - from: local
      source: executors/javascript/javaScriptSoftwareLanguages.js
      destination: ./executorConfigurations.js
    - from: local
      source: test/
      destination: ./test
    - from: local
      source: test_data/
      destination: ./test_data
    - from: local
      source: .eslintrc.json
      destination: ./.eslintrc.json
    apt: { packages: [git, build-essential] }
    node: { requirements: [package.json, package-lock.json, executors/javascript/function-schemata/package.json, executors/javascript/function-schemata/package-lock.json] }
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      environment: { LINK: g++ }
  development-javascript-all:
    includes: [build-javascript-all-evaluator]
    apt: { packages: [ca-certificates] }
    entrypoint: [node, server.js]
  prep-javascript-all:
    includes: [build-javascript-all-evaluator]
    node: { env: production }
  production-javascript-all:
    copies: [prep-javascript-all]
    node: { env: production }
    entrypoint: [node, server.js]
  test-javascript-all-evaluator:
    includes: [build-javascript-all-evaluator]
    apt: { packages: [ca-certificates] }
    entrypoint: [npm, run, test:javascript-all]
    runs:
      # Allow the application to write to the filesystem so we can generate coverage reports
      insecurely: true

  # These variants are for testing the Python3 executor code only, without the
  # service layer.
  build-python3-executor:
    base: docker-registry.wikimedia.org/python3-devel:0.0.2
    apt: { packages: [python3-dev, python3-setuptools, python3-pkgconfig] }
    lives:
      in: /executors/python3
    copies:
    - from: local
      source: executors/python3
      destination: .
    - from: local
      source: test_data
      destination: ./test/test_data
    python:
      version: python3
  test-python3-executor:
    includes: [build-python3-executor]
    lives:
      in: /executors/python3
    python:
      use-system-flag: false
      requirements:
      - from: local
        source: executors/python3/requirements-dev.txt
        destination: ./requirements-dev.txt
    entrypoint: [pytest]
  build-format-python3:
    base: docker-registry.wikimedia.org/python3-build-bullseye
    lives:
      in: /executors/python3
    copies:
    - from: local
      source: executors/python3
      destination: .
  format-python3:
    includes: [build-format-python3]
    lives:
      in: /executors/python3
    python:
      use-system-flag: false
      requirements:
      - from: local
        source: executors/python3/requirements-format.txt
        destination: ./requirements-format.txt
    entrypoint: [sh, "./format.sh"]

  # These variants are for testing the JavaScript executor code only, without the
  # service layer.
  build-javascript-executor:
    lives:
      in: /executors/javascript
    copies:
    - from: local
      source: executors/javascript/
      destination: .
    - from: local
      source: test_data
      destination: ./test/test_data
    node:
      requirements:
      - from: local
        source: executors/javascript/package.json
        destination: ./package.json
      - from: local
        source: executors/javascript/package-lock.json
        destination: ./package-lock.json
      - from: local
        source: executors/javascript/function-schemata/package.json
        destination: ./function-schemata/package.json
      - from: local
        source: executors/javascript/function-schemata/package-lock.json
        destination: ./function-schemata/package-lock.json
  test-javascript-executor:
    includes: [build-javascript-executor]
    lives:
      in: /executors/javascript
    entrypoint: [npm, test]
